---
import path from 'node:path';
import type { PageGraphConfig } from "../../schema";

import config from 'virtual:starlight-site-graph/config';
import astroConfig from 'virtual:starlight-site-graph/astro-config';

import Graph from "./Graph.astro";

import { stripSlashes } from '../util';
import { firstMatchingPattern } from "../../sitemap/util";

interface Props {
    slug: string;
    class: string;
    showGraph?: boolean;
    entry?: Record<string, any>;
}

let graphData: Partial<PageGraphConfig> = {};
let { slug, class: className, showGraph } = Astro.props;

// If frontmatter is explicitly passed as 'entry' (happens in a Starlight context)
if (Astro.props.entry) {
    graphData = Astro.props.entry['data']?.graph;
}

// Infer slug from URL if not explicitly provided
slug ??= Astro.url.pathname;
const slugWithBase = stripSlashes(path.join(astroConfig.base, slug).replaceAll("\\", "/"));

if (showGraph === undefined) {
    if (graphData?.visible !== undefined) {
        showGraph = graphData.visible;
    } else {
        showGraph = config.graphConfig.visibilityRules ? firstMatchingPattern(slugWithBase, config.graphConfig.visibilityRules, false) : true;
    }
}
---

{showGraph &&
<div class:list={className}>
    <slot name="title"/>
    <Graph
        slug={slugWithBase}
        sitemap={import.meta.env.DEV ? config.sitemapConfig.sitemap : {}}
        config={{
            ...config.graphConfig,
            ...graphData
        }}
        debug={config.debug}
    />
</div>
    }

<script>
    window.addEventListener('DOMContentLoaded', async () => {
        if (import.meta.env.PROD) {
            let base_url = import.meta.env.BASE_URL;
            if (!base_url.endsWith('/')) {
                base_url += '/';
            }

            const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
            onIdle(async () => {
                const sitemap = await (await fetch(base_url + 'sitegraph/sitemap.json')).json();
                const sitemap_string = JSON.stringify(sitemap);
                document.querySelectorAll('graph-component').forEach((graph) => {
                    if (graph.getAttribute('data-sitemap') === '{}') {
                        graph.setAttribute('data-sitemap', sitemap_string);
                    }
                });
            });
        }
    });
</script>
