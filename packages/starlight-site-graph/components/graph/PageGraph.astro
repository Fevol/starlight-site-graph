---
import type { Props } from '@astrojs/starlight/props';
import config from 'virtual:starlight-site-graph/config';
import Graph from "./Graph.astro";
import {firstMatchingPattern} from "../../sitemap/util";
import {type PageGraphConfig} from "../../schema";

const graphData: PageGraphConfig | undefined = Astro.props.entry['data'].graph;

interface CurrentProps extends Props {
    class: string;
    showGraph?: boolean;
}

let { slug, showGraph, class: className } = Astro.props as CurrentProps;

if (showGraph === undefined) {
    if (graphData?.visible !== undefined) {
        showGraph = graphData.visible;
    } else {
        showGraph = config.graphConfig.visibilityRules ? firstMatchingPattern(slug, config.graphConfig.visibilityRules, false) : true;
    }
}

---
{showGraph &&
    <div class:list={className}>
        <slot name="title"/>
        <Graph
            slug={slug}
            sitemap={import.meta.env.DEV ? config.sitemapConfig.sitemap : {}}
            config={{
                ...config.graphConfig,
                ...graphData
            }}
            debug={config.debug}
        />
    </div>
}

<script>
    window.addEventListener('DOMContentLoaded', async () => {
        if (import.meta.env.PROD) {
            const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
            onIdle(async () => {
                const sitemap = await (await fetch(import.meta.env.BASE_URL + 'sitegraph/sitemap.json')).json();
                const sitemap_string = JSON.stringify(sitemap);
                document.querySelectorAll('graph-component').forEach((graph) => {
                    if (graph.getAttribute('data-sitemap') === '{}') {
                        graph.setAttribute('data-sitemap', sitemap_string);
                    }
                });
            });
        }
    });
</script>
