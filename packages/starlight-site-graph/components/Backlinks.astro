---
import path from 'node:path';
import type { Props } from '@astrojs/starlight/props';
import type { PageGraphConfig } from '../schema';

import config from 'virtual:starlight-site-graph/config'
import astroConfig from 'virtual:starlight-site-graph/astro-config';

import { ensureTrailingSlash, stripSlashes } from './util';
import {firstMatchingPattern} from "../sitemap/util";

interface CurrentProps extends Props {
    class: string;
    showBacklinks?: boolean;
}

let backlinksData: Partial<PageGraphConfig> = {};
let { slug, showBacklinks, class: className } = Astro.props as CurrentProps;

// If frontmatter is explicitly passed as 'entry' (happens in a Starlight context)
if (Astro.props.entry) {
    backlinksData = Astro.props.entry['data']?.backlinks;
}

// Infer slug from URL if not explicitly provided
slug ??= Astro.url.pathname;
const slugWithBase = ensureTrailingSlash(stripSlashes(path.join(astroConfig.base, slug).replaceAll("\\", "/")));

const sitemap = config.sitemapConfig.sitemap;

let backlinks: string[] = [];
if (sitemap) {
    const sitemap_entry = sitemap[slugWithBase];
    if (sitemap_entry?.backlinks)
        backlinks = sitemap_entry.backlinks.sort((a, b) => sitemap[a]!.title.localeCompare(sitemap[b]!.title));
}

if (showBacklinks === undefined) {
    if (backlinksData?.visible !== undefined) {
        showBacklinks = backlinksData.visible;
    } else {
        showBacklinks = config.backlinksConfig.visibilityRules ? firstMatchingPattern(slugWithBase, config.backlinksConfig.visibilityRules, false) : true;
    }
}

---

{showBacklinks && backlinks.length > 0 &&
    <div class:list={className}>
        <slot name="title"/>
        {backlinks.map((link) => (
                <ul class="backlink" style="--depth: 0;">
                    <li style="--depth: 0;">
                        <a href={"/" + link } style="--depth: 0;", target="_self">
                            <span style="--depth: 0;">{sitemap![link]!.title}</span>
                        </a>
                    </li>
                </ul>
        ))}
    </div>
}
