---
import path from 'node:path';
import type { PageGraphConfig } from '../../schema';

import config from 'virtual:starlight-site-graph/config'
import astroConfig from 'virtual:starlight-site-graph/astro-config';

import { ensureTrailingSlash, stripSlashes } from '../util';
import {firstMatchingPattern} from "../../sitemap/util";
import Backlinks from './Backlinks.astro';

interface Props {
	slug: string;
	class: string;
	showBacklinks?: boolean;
	entry?: Record<string, any>;
}

let backlinksData: Partial<PageGraphConfig> = {};
let { slug, showBacklinks, class: className } = Astro.props;

// If frontmatter is explicitly passed as 'entry' (happens in a Starlight context)
if (Astro.props.entry) {
	backlinksData = Astro.props.entry['data']?.backlinks;
}

// Infer slug from URL if not explicitly provided
slug ??= Astro.url.pathname;
const slugWithBase = ensureTrailingSlash(stripSlashes(path.join(astroConfig.base, slug).replaceAll("\\", "/")));

const sitemap = config.sitemapConfig.sitemap;

let backlinks: string[] = [];
if (sitemap) {
	const sitemap_entry = sitemap[slugWithBase];
	if (sitemap_entry?.backlinks)
		backlinks = sitemap_entry.backlinks.sort((a, b) => sitemap[a]!.title.localeCompare(sitemap[b]!.title));
}

if (showBacklinks === undefined) {
	if (backlinksData?.visible !== undefined) {
		showBacklinks = backlinksData.visible;
	} else {
		showBacklinks = config.backlinksConfig.visibilityRules ? firstMatchingPattern(slugWithBase, config.backlinksConfig.visibilityRules, false) : true;
	}
}

---

{showBacklinks && backlinks.length > 0 &&
	<div class:list={className}>
		<slot name="title"/>
		<Backlinks backlinks={backlinks} sitemap={sitemap} />
	</div>
}
